{"version":3,"sources":["GlobalStyle.js","features/tasks/Buttons/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","common/Header/styled.js","common/Header/index.js","common/Footer/styled.js","common/Footer/index.js","common/Section/styled.js","common/Section/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","features/tasks/Buttons/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","platinum","StyledButton","styled","button","complete","css","white","green","done","remove","red","black","standard","teal","grey","hideDone","form","StyledButtonSection","div","breakpoint","mobileMax","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","newTaskContent","reducers","addTasks","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","taskIndex","findIndex","id","removeTask","splice","markAllTaskDone","map","handleNewTaskContent","action","fetchExampleTasks","setTasks","actions","selectTasksState","selectTasks","selectHideDone","selectNewTaskContent","selectIsListEmpty","length","selectAreAllTasksDone","every","selectIsAnyTaskDone","find","StyledForm","StyledInput","input","Form","useSelector","inputRef","useRef","trimmedNewTaskConent","trim","dispatch","useDispatch","onSubmit","event","preventDefault","content","nanoid","current","focus","autoFocus","value","type","placeholder","onChange","target","ref","StyledHeader","header","StyledTitle","h1","Header","title","StyledFooter","footer","Footer","year","StyledSection","section","StyledSectionHeader","StyledSubheader","h2","Section","additionalContent","body","StyledContainer","main","maxWidth","Container","children","StyledList","ul","StyledTask","li","hidden","StyledContent","p","TasksList","onClick","className","Buttons","isListEmpty","areEveryTasksDone","isAnyTaskDone","disabled","Tasks","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","call","exampleTasks","put","alert","select","takeLatest","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.016275db.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        background-color: ${({ theme }) => theme.color.platinum};\r\n        box-sizing: border-box;  \r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        font-family: 'Lato', sans-serif;\r\n        -webkit-font-smoothing: antialiased;\r\n        -moz-osx-font-smoothing: grayscale;\r\n    }\r\n`;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledButton = styled.button`\r\n    background-color: transparent;\r\n    border: none;\r\n\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n\r\n    ${({ complete }) => complete && css`\r\n        transition: 1s;\r\n\r\n        &:hover {\r\n            color: ${({ theme }) => theme.color.white};\r\n            background-color: ${({ theme }) => theme.color.green};\r\n            border-radius: 15px;\r\n        }\r\n    `}\r\n\r\n    ${({ done }) => done && css`\r\n        background-color: ${({ theme }) => theme.color.green};\r\n        color: ${({ theme }) => theme.color.white};\r\n        border-radius: 15px;\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        transition: 1s;\r\n\r\n        &:hover {\r\n            background-color: ${({ theme }) => theme.color.red};\r\n            color: ${({ theme }) => theme.color.white};\r\n            border-radius: 15px;\r\n        }\r\n\r\n        &:active {\r\n            color: ${({ theme }) => theme.color.black};\r\n        }\r\n    `}\r\n\r\n    ${({ standard }) => standard && css`\r\n        padding: 5px;\r\n        color: ${({ theme }) => theme.color.teal};\r\n        transition: 1s;\r\n        min-width: 127px;\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n\r\n        &:active {\r\n            color: ${({ theme }) => theme.color.black};\r\n        }\r\n\r\n        &:disabled {\r\n            color: ${({ theme }) => theme.color.grey};\r\n            cursor: auto;\r\n        }\r\n    `}\r\n\r\n    ${({ hideDone }) => hideDone && css`\r\n        min-width: 127px;\r\n        padding: 5px;\r\n        color: ${({ theme }) => theme.color.teal};\r\n        transition: 1s;\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n\r\n        &:active {\r\n            color: ${({ theme }) => theme.color.black};\r\n        }\r\n\r\n        &:disabled {\r\n            color: ${({ theme }) => theme.color.grey};\r\n            cursor: auto;\r\n        }\r\n    `}\r\n\r\n    ${({ form }) => form && css`\r\n        background-color: ${({ theme }) => theme.color.teal};\r\n        color: ${({ theme }) => theme.color.white};\r\n        border: none;\r\n        min-width: fit-content;\r\n        padding: 10px;\r\n        transition: 1s;\r\n\r\n        &:hover {\r\n            cursor: pointer;\r\n            transform: scale(1.08);\r\n            filter: brightness(110%);\r\n        }\r\n    `}\r\n`;\r\n\r\nexport const StyledButtonSection = styled.div`\r\n    display: flex;\r\n    gap: 20px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-direction: column;\r\n        align-items: center;\r\n        margin-bottom: 20px;\r\n    }\r\n`;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = tasks => {\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n};\r\n\r\nexport const getTasksFromLocalStorage = () => \r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n        newTaskContent: \"\",\r\n    },\r\n    reducers: {\r\n        addTasks: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const taskIndex = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[taskIndex].done = !tasks[taskIndex].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const taskIndex = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks.splice(taskIndex, 1)\r\n        },\r\n        markAllTaskDone: ({ tasks }) => {\r\n            tasks.map(task => task.done = true);\r\n        },\r\n        handleNewTaskContent: (state, action) => {\r\n            state.newTaskContent = action.payload;\r\n        },\r\n        fetchExampleTasks: () => { },\r\n        setTasks: (state, {payload: tasks}) => {\r\n            state.tasks = tasks;\r\n        },\r\n    }\r\n});\r\n\r\nexport const {\r\n    addTasks,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    markAllTaskDone,\r\n    handleNewTaskContent,\r\n    fetchExampleTasks,\r\n    setTasks,\r\n} = tasksSlice.actions;\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectNewTaskContent = state => selectTasksState(state).newTaskContent;\r\nexport const selectIsListEmpty = state => selectTasks(state).length === 0;\r\nexport const selectAreAllTasksDone = state => selectTasks(state).every(({ done }) => done);\r\nexport const selectIsAnyTaskDone = state => selectTasks(state).find(({ done }) => done);\r\n\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    padding: 15px;\r\n    display: flex;\r\n    gap: 10px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const StyledInput = styled.input`\r\n    padding: 10px;\r\n    width: 100%;\r\n    border: 2px solid ${({ theme }) => theme.color.platinum};\r\n`;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { StyledButton } from \"../Buttons/styled\";\r\nimport { addTasks, selectNewTaskContent, handleNewTaskContent } from \"../tasksSlice\";\r\nimport { StyledForm, StyledInput } from \"./styled\";\r\n\r\nconst Form = () => {\r\n\r\n    const newTaskContent = useSelector(selectNewTaskContent);\r\n    const inputRef = useRef(null);\r\n    const trimmedNewTaskConent = newTaskContent.trim();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (trimmedNewTaskConent === \"\") {\r\n            return;\r\n        };\r\n        dispatch(addTasks({\r\n            content: trimmedNewTaskConent,\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n        // setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <StyledInput\r\n                autoFocus\r\n                value={newTaskContent}\r\n                type=\"text\"\r\n                placeholder=\"What is to do?\"\r\n                onChange={({ target }) => dispatch(handleNewTaskContent(target.value))}\r\n                ref={inputRef}\r\n            />\r\n            <StyledButton form type=\"submit\">\r\n                Add Task\r\n            </StyledButton>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form;\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.header`\r\n    background-color: inherit;\r\n    width: 100%;\r\n    padding: 10px 0;\r\n`;\r\n\r\nexport const StyledTitle = styled.h1`\r\n    margin: 0;\r\n`;","import { StyledHeader, StyledTitle } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n    <StyledHeader>\r\n        <StyledTitle>{title}</StyledTitle>\r\n    </StyledHeader>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledFooter = styled.footer`\r\n    text-align: center;\r\n`;","import { StyledFooter } from \"./styled\";\r\n\r\n\r\nconst Footer = ({year, name}) => (\r\n    <StyledFooter>\r\n        {`Coded by`} {name} &copy; {year}\r\n    </StyledFooter>\r\n);\r\n\r\nexport default Footer;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    margin: 20px auto;\r\n`;\r\n\r\nexport const StyledSectionHeader = styled.header`\r\n    border-bottom: 2px solid ${({ theme }) => theme.color.platinum};\r\n    display: flex;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-direction: column;\r\n        text-align: center;\r\n    }\r\n`;\r\n\r\nexport const StyledSubheader = styled.h2`\r\n    margin: 5px 0;\r\n    padding: 15px;\r\n    flex-grow: 1;\r\n`;","import { StyledSection, StyledSectionHeader, StyledSubheader } from \"./styled\";\r\n\r\nconst Section = ({ title, additionalContent, body }) => (\r\n    <StyledSection>\r\n        <StyledSectionHeader>\r\n            <StyledSubheader>{title}</StyledSubheader>\r\n            {additionalContent}\r\n        </StyledSectionHeader>\r\n        {body}\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n    max-width: ${({ theme }) => theme.breakpoint.maxWidth}px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        max-width: 100%;\r\n    }\r\n`;","import { StyledContainer } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n);\r\n\r\nexport default Container;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledList = styled.ul`\r\n    padding: 10px;\r\n    list-style-type: none;\r\n`;\r\n\r\nexport const StyledTask = styled.li`\r\n    align-items: center;\r\n    display: flex;\r\n    padding: 5px;\r\n    margin-top: 10px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.grey};\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const StyledContent = styled.p`\r\n    padding: 0 10px;\r\n    display: flex;\r\n    flex-grow: 1;\r\n    word-break: break-word;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { StyledButton } from \"../Buttons/styled\";\r\nimport {\r\n    selectTasks,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    selectHideDone\r\n} from \"../tasksSlice\";\r\nimport { StyledContent, StyledList, StyledTask } from \"./styled\";\r\n\r\nconst TasksList = () => {\r\n    const tasks = useSelector(selectTasks)\r\n    const hideDone = useSelector(selectHideDone)\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <StyledList>\r\n            {tasks.map(task => (\r\n                <StyledTask\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}\r\n                >\r\n                    <StyledButton\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                        done={task.done}\r\n                        complete\r\n                    >\r\n                        <i\r\n                            className=\"material-icons md-24\"\r\n                        >\r\n                            task_alt\r\n                        </i>\r\n                    </StyledButton>\r\n                    <StyledContent\r\n                        done={task.done}>\r\n                        {task.content}\r\n                    </StyledContent>\r\n                    <StyledButton\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                        remove\r\n                    >\r\n                        <i\r\n                            className=\"material-icons md-24\"\r\n                        >\r\n                            delete\r\n                        </i>\r\n                    </StyledButton>\r\n                </StyledTask>\r\n            ))}\r\n        </StyledList >\r\n    );\r\n};\r\n\r\nexport default TasksList;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    selectHideDone,\r\n    toggleHideDone,\r\n    markAllTaskDone,\r\n    selectIsListEmpty,\r\n    selectAreAllTasksDone,\r\n    selectIsAnyTaskDone,\r\n    fetchExampleTasks\r\n} from \"../tasksSlice\";\r\nimport { StyledButton, StyledButtonSection } from \"./styled\";\r\n\r\nconst Buttons = () => {\r\n    const hideDone = useSelector(selectHideDone);\r\n    const isListEmpty = useSelector(selectIsListEmpty);\r\n    const areEveryTasksDone = useSelector(selectAreAllTasksDone);\r\n    const isAnyTaskDone = useSelector(selectIsAnyTaskDone);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <StyledButtonSection>\r\n            <StyledButton\r\n                standard\r\n                onClick={() => dispatch(fetchExampleTasks())}\r\n            >\r\n                Example Tasks\r\n            </StyledButton>\r\n            {!isListEmpty && (\r\n                <>\r\n                    <StyledButton\r\n                        onClick={() => dispatch(markAllTaskDone())}\r\n                        disabled={areEveryTasksDone}\r\n                        standard\r\n                    >\r\n                        Mark all as done\r\n                    </StyledButton>\r\n                    <StyledButton\r\n                        onClick={() => dispatch(toggleHideDone())}\r\n                        hideDone\r\n                        disabled={!isAnyTaskDone}\r\n                    >\r\n                        {isAnyTaskDone && hideDone ? \"Show\" : \"Hide\"} done\r\n                    </StyledButton>\r\n                </>)}\r\n        </StyledButtonSection>\r\n\r\n    );\r\n};\r\n\r\nexport default Buttons;","import Form from \"./Form\";\r\nimport Header from \"../../common/Header\";\r\nimport Footer from \"../../common/Footer\";\r\nimport Section from \"../../common/Section\";\r\nimport Container from \"../../common/Container\";\r\nimport TasksList from \"./TasksList\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst Tasks = () => {\r\n  return (\r\n    <Container>\r\n      <Header title=\"Task List\" />\r\n      <Section\r\n        title=\"Add task\"\r\n        body={<Form />}\r\n      />\r\n      <Section\r\n        title=\"List of tasks\"\r\n        body={<TasksList />}\r\n        additionalContent={<Buttons />}\r\n      />\r\n      <Footer name=\"Patryk Krawczyk\" year=\"2021\" />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Tasks;\r\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nconst App = () => <Tasks />;\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/react-task-list/exampleTasks.json\");\r\n\r\n    if (!response.ok) {\r\n        new Error(response.statusText);\r\n    }\r\n\r\n    return await response.json();\r\n};","import { takeLatest, takeEvery, call, put, select } from 'redux-saga/effects';\r\nimport { getExampleTasks } from './getExampleTasks';\r\nimport { setTasks, fetchExampleTasks, selectTasks } from './tasksSlice';\r\nimport { saveTasksInLocalStorage} from './tasksLocalStorage'\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasks))\r\n    } catch (error) {\r\n        yield call(alert, \"Something went wrong!\")\r\n    }\r\n};\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n};\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n};","import { all } from 'redux-saga/effects';\r\nimport { tasksSaga } from './features/tasks/tasksSaga';\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ])\r\n}","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { GlobalStyle } from './GlobalStyle';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { theme } from './theme';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <GlobalStyle />\r\n        <App />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export const theme = {\r\n    color: {\r\n        white: \"#fff\",\r\n        platinum: \"#E6E6E6\",\r\n        green: \"#00B300\",\r\n        red: \"#FF0000\",\r\n        black: \"#000000\",\r\n        teal: \"#008080\",\r\n        grey: \"#DEDEDE\"\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n        maxWidth: 1280,\r\n    },\r\n};\r\n"],"sourceRoot":""}