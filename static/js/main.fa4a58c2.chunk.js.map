{"version":3,"sources":["Form/index.js","Header/index.js","Footer/index.js","Section/index.js","Tasks/index.js","Buttons/index.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trim","value","type","placeholder","onChange","target","autoFocus","Header","title","Footer","year","name","Section","additionalContent","body","Tasks","tasks","hideDoneTasks","removeTask","toggleDoneTask","useEffect","localStorage","setItem","JSON","stringify","map","task","done","onClick","id","content","Buttons","toggleHideDone","markAllTaskDone","length","disabled","every","some","Container","children","App","setHideDoneTask","parse","getItem","setTasks","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa4a58c2.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Form = ({ addNewTask }) => {\r\n\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        addNewTask(newTaskContent.trim());\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={onFormSubmit}>\r\n            <input\r\n                value={newTaskContent}\r\n                type=\"text\"\r\n                className=\"form__input\"\r\n                placeholder=\"What is to do?\"\r\n                onChange={(event) => setNewTaskContent(event.target.value)}\r\n                autoFocus\r\n            />\r\n            <button\r\n                className=\"form__button\"\r\n                type=\"submit\"\r\n            >\r\n                Add Task\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;\r\n\r\n","import \"./style.css\"\r\n\r\nconst Header = ({ title }) => (\r\n    <header className=\"header\">\r\n        <h1 className=\"header__title\">{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import \"./style.css\";\r\n\r\nconst Footer = ({year, name}) => (\r\n    <footer className=\"footer\">\r\n        {`Coded by`} {name} &copy; {year}\r\n    </footer>\r\n);\r\n\r\nexport default Footer;","import \"./style.css\";\r\n\r\nconst Section = ({ title, additionalContent, body }) => (\r\n    <section className=\"section\">\r\n        <header className=\"section__header\">\r\n            <h2 className=\"section__title\">{title}</h2>\r\n            {additionalContent}\r\n        </header>\r\n            {body}\r\n    </section>\r\n);\r\n\r\nexport default Section;","import { useEffect } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, hideDoneTasks, removeTask, toggleDoneTask }) => {\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"storedTasks\", JSON.stringify(tasks));\r\n    }, [tasks]);\r\n\r\n    return (\r\n        <ul className=\"list\">\r\n            {tasks.map(task => (\r\n                <li\r\n                    key={task.id}\r\n                    className={`${task.done && hideDoneTasks ? \"list__item--hidden\" : \"\"} list__item`}\r\n                >\r\n                    <button\r\n                        onClick={() => toggleDoneTask(task.id)}\r\n                        className={`${task.done ? \"button--done\" : \"\"} button button--complete`}\r\n                    >\r\n                        <i\r\n                            className=\"material-icons md-24\"\r\n                        >\r\n                            task_alt\r\n                        </i>\r\n                    </button>\r\n                    <span\r\n                        className={`${task.done ? \"list__text--done\" : \"\"} list__text`}>\r\n                        {task.content}\r\n                    </span>\r\n                    <button\r\n                        onClick={() => removeTask(task.id)}\r\n                        className=\"button button--delete\"\r\n                    >\r\n                        <i\r\n                            className=\"material-icons md-24\"\r\n                        >\r\n                            delete\r\n                        </i>\r\n                    </button>\r\n                </li>\r\n            ))}\r\n        </ul >\r\n    );\r\n};\r\n\r\nexport default Tasks;","import \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDoneTasks, toggleHideDone, markAllTaskDone }) => {\r\n\r\n    if (tasks.length === 0) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div className=\"section__buttons\">\r\n            <button\r\n                onClick={markAllTaskDone}\r\n                disabled={(tasks.every(({ done }) => done))}\r\n                className=\"button button--selectAll\"\r\n            >\r\n                Mark all as done\r\n            </button>\r\n            <button\r\n                onClick={toggleHideDone}\r\n                className=\"button button--hideDone\"\r\n            >\r\n                {tasks.some(({done}) => done) && hideDoneTasks ? \"Show\" : \"Hide\"} done\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import \"./style.css\"\r\n\r\nconst Container = ({children}) => (\r\n    <div className=\"container\">\r\n        {children}\r\n    </div>\r\n);\r\n\r\nexport default Container;","import Form from \"./Form\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Section from \"./Section\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Container from \"./Container\";\nimport { useState } from \"react\";\n\nfunction App() {\n  let [hideDoneTasks, setHideDoneTask] = useState(false);\n  const [tasks, setTasks] = useState(JSON.parse(localStorage.getItem(\"storedTasks\")));\n\n  const toggleHideDone = () => {\n    setHideDoneTask(hideDoneTasks = !hideDoneTasks);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleDoneTask = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n\n      return task;\n    }));\n  };\n\n  const markAllTaskDone = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task,\n      done: true,\n    })));\n  };\n\n  const addNewTask = (newTaskContent) => {\n    if (newTaskContent === \"\") {\n      return;\n    }\n    return (\n      setTasks(tasks => ([\n        ...tasks,\n        {\n          content: newTaskContent,\n          done: false,\n          id: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1,\n        },\n      ]))\n    );\n  };\n\n  return (\n    <Container>\n      <Header title=\"Task List\" />\n      <Section\n        title=\"Add task\"\n        body={<Form\n          addNewTask={addNewTask}\n        />}\n      />\n      <Section\n        title=\"List of tasks\"\n        body={\n          <Tasks\n            toggleDoneTask={toggleDoneTask}\n            removeTask={removeTask}\n            tasks={tasks}\n            hideDoneTasks={hideDoneTasks}\n          />}\n          additionalContent={\n          <Buttons\n            tasks={tasks}\n            hideDoneTasks={hideDoneTasks}\n            toggleHideDone={toggleHideDone}\n            markAllTaskDone={markAllTaskDone}\n          />}\n      />\n      <Footer name=\"Patryk Krawczyk\" year=\"2021\" />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}