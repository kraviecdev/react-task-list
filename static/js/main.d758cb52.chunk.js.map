{"version":3,"sources":["GlobalStyle.js","features/tasks/Buttons/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","common/Header/styled.js","common/Header/index.js","common/Footer/styled.js","common/Footer/index.js","common/Section/styled.js","common/Section/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","features/tasks/Buttons/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","platinum","StyledButton","styled","button","complete","css","white","green","done","remove","red","black","selectAll","teal","grey","hideDone","form","StyledButtonSection","div","breakpoint","mobileMax","tasksSlice","createSlice","name","initialState","tasks","reducers","addTasks","payload","push","toggleHideDone","state","toggleTaskDone","taskIndex","findIndex","id","removeTask","splice","markAllTaskDone","map","task","actions","selectTasks","StyledForm","StyledInput","input","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","content","trim","nanoid","current","focus","autoFocus","value","type","placeholder","onChange","target","ref","StyledHeader","header","StyledTitle","h1","Header","title","StyledFooter","footer","Footer","year","StyledSection","section","StyledSectionHeader","StyledSubheader","h2","Section","additionalContent","body","StyledContainer","main","maxWidth","Container","children","StyledList","ul","StyledTask","li","hidden","StyledContent","p","TasksList","useSelector","onClick","className","Buttons","length","disabled","every","some","Tasks","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.d758cb52.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        background-color: ${({ theme }) => theme.color.platinum};\r\n        box-sizing: border-box;  \r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        font-family: 'Lato', sans-serif;\r\n        -webkit-font-smoothing: antialiased;\r\n        -moz-osx-font-smoothing: grayscale;\r\n    }\r\n`;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledButton = styled.button`\r\n    background-color: transparent;\r\n    border: none;\r\n\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n\r\n    ${({ complete }) => complete && css`\r\n        transition: 1s;\r\n\r\n        &:hover {\r\n            color: ${({ theme }) => theme.color.white};\r\n            background-color: ${({ theme }) => theme.color.green};\r\n            border-radius: 15px;\r\n        }\r\n    `}\r\n\r\n    ${({ done }) => done && css`\r\n        background-color: ${({ theme }) => theme.color.green};\r\n        color: ${({ theme }) => theme.color.white};\r\n        border-radius: 15px;\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        transition: 1s;\r\n\r\n        &:hover {\r\n            background-color: ${({ theme }) => theme.color.red};\r\n            color: ${({ theme }) => theme.color.white};\r\n            border-radius: 15px;\r\n        }\r\n\r\n        &:active {\r\n            color: ${({ theme }) => theme.color.black};\r\n        }\r\n    `}\r\n\r\n    ${({ selectAll }) => selectAll && css`\r\n        padding: 5px;\r\n        color: ${({ theme }) => theme.color.teal};\r\n        transition: 1s;\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n\r\n        &:active {\r\n            color: ${({ theme }) => theme.color.black};\r\n        }\r\n\r\n        &:disabled {\r\n            color: ${({ theme }) => theme.color.grey};\r\n            cursor: auto;\r\n        }\r\n    `}\r\n\r\n    ${({ hideDone }) => hideDone && css`\r\n        min-width: 127px;\r\n        padding: 5px;\r\n        color: ${({ theme }) => theme.color.teal};\r\n        transition: 1s;\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n\r\n        &:active {\r\n            color: ${({ theme }) => theme.color.black};\r\n        }\r\n\r\n        &:disabled {\r\n            color: ${({ theme }) => theme.color.grey};\r\n            cursor: auto;\r\n        }\r\n    `}\r\n\r\n    ${({ form }) => form && css`\r\n        background-color: ${({ theme }) => theme.color.teal};\r\n        color: ${({ theme }) => theme.color.white};\r\n        border: none;\r\n        min-width: fit-content;\r\n        padding: 10px;\r\n        transition: 1s;\r\n\r\n        &:hover {\r\n            cursor: pointer;\r\n            transform: scale(1.08);\r\n            filter: brightness(110%);\r\n        }\r\n    `}\r\n`;\r\n\r\nexport const StyledButtonSection = styled.div`\r\n    display: flex;\r\n    gap: 20px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-direction: column;\r\n        align-items: center;\r\n        margin-bottom: 20px;\r\n    }\r\n`;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTasks: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload }) => {\r\n            const taskIndex = tasks.findIndex(({ id }) => id === payload);\r\n            tasks[taskIndex].done = !tasks[taskIndex].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload }) => {\r\n            const taskIndex = tasks.findIndex(({ id }) => id === payload);\r\n            tasks.splice(taskIndex, 1)\r\n        },\r\n        markAllTaskDone: ({ tasks }) => {\r\n            tasks.map(task => task.done = true);\r\n        },\r\n    }\r\n});\r\n\r\nexport const { addTasks, toggleHideDone, toggleTaskDone, removeTask, markAllTaskDone } = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    padding: 15px;\r\n    display: flex;\r\n    gap: 10px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const StyledInput = styled.input`\r\n    padding: 10px;\r\n    width: 100%;\r\n    border: 2px solid ${({ theme }) => theme.color.platinum};\r\n`;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { StyledButton } from \"../Buttons/styled\";\r\nimport { addTasks } from \"../tasksSlice\";\r\nimport { StyledForm, StyledInput } from \"./styled\";\r\n\r\nconst Form = () => {\r\n\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (newTaskContent === \"\") {\r\n            return;\r\n        };\r\n        dispatch(addTasks({\r\n            content: newTaskContent.trim(),\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <StyledInput\r\n                autoFocus\r\n                value={newTaskContent}\r\n                type=\"text\"\r\n                placeholder=\"What is to do?\"\r\n                onChange={(event) => setNewTaskContent(event.target.value)}\r\n                ref={inputRef}\r\n            />\r\n            <StyledButton form type=\"submit\">\r\n                Add Task\r\n            </StyledButton>\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form;\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.header`\r\n    background-color: inherit;\r\n    width: 100%;\r\n    padding: 10px 0;\r\n`;\r\n\r\nexport const StyledTitle = styled.h1`\r\n    margin: 0;\r\n`;","import { StyledHeader, StyledTitle } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n    <StyledHeader>\r\n        <StyledTitle>{title}</StyledTitle>\r\n    </StyledHeader>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const StyledFooter = styled.footer`\r\n    text-align: center;\r\n`;","import { StyledFooter } from \"./styled\";\r\n\r\n\r\nconst Footer = ({year, name}) => (\r\n    <StyledFooter>\r\n        {`Coded by`} {name} &copy; {year}\r\n    </StyledFooter>\r\n);\r\n\r\nexport default Footer;","import styled from \"styled-components\";\r\n\r\nexport const StyledSection = styled.section`\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    margin: 20px auto;\r\n`;\r\n\r\nexport const StyledSectionHeader = styled.header`\r\n    border-bottom: 2px solid ${({ theme }) => theme.color.platinum};\r\n    display: flex;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-direction: column;\r\n        text-align: center;\r\n    }\r\n`;\r\n\r\nexport const StyledSubheader = styled.h2`\r\n    margin: 5px 0;\r\n    padding: 15px;\r\n    flex-grow: 1;\r\n`;","import { StyledSection, StyledSectionHeader, StyledSubheader } from \"./styled\";\r\n\r\nconst Section = ({ title, additionalContent, body }) => (\r\n    <StyledSection>\r\n        <StyledSectionHeader>\r\n            <StyledSubheader>{title}</StyledSubheader>\r\n            {additionalContent}\r\n        </StyledSectionHeader>\r\n        {body}\r\n    </StyledSection>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n    max-width: ${({ theme }) => theme.breakpoint.maxWidth}px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        max-width: 100%;\r\n    }\r\n`;","import { StyledContainer } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n);\r\n\r\nexport default Container;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledList = styled.ul`\r\n    padding: 10px;\r\n    list-style-type: none;\r\n`;\r\n\r\nexport const StyledTask = styled.li`\r\n    align-items: center;\r\n    display: flex;\r\n    padding: 5px;\r\n    margin-top: 10px;\r\n    border-bottom: 1px solid ${({ theme }) => theme.color.grey};\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const StyledContent = styled.p`\r\n    padding: 0 10px;\r\n    display: flex;\r\n    flex-grow: 1;\r\n    word-break: break-word;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { StyledButton } from \"../Buttons/styled\";\r\nimport { selectTasks, toggleTaskDone, removeTask } from \"../tasksSlice\";\r\nimport { StyledContent, StyledList, StyledTask } from \"./styled\";\r\n\r\nconst TasksList = () => {\r\n    const {tasks, hideDone} = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n    <StyledList>\r\n        {tasks.map(task => (\r\n            <StyledTask\r\n                key={task.id}\r\n                hidden={task.done && hideDone}\r\n            >\r\n                <StyledButton\r\n                    onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    done={task.done}\r\n                    complete\r\n                >\r\n                    <i\r\n                        className=\"material-icons md-24\"\r\n                    >\r\n                        task_alt\r\n                    </i>\r\n                </StyledButton>\r\n                <StyledContent\r\n                    done={task.done}>\r\n                    {task.content}\r\n                </StyledContent>\r\n                <StyledButton\r\n                    onClick={() => dispatch(removeTask())}\r\n                    remove\r\n                >\r\n                    <i\r\n                        className=\"material-icons md-24\"\r\n                    >\r\n                        delete\r\n                    </i>\r\n                </StyledButton>\r\n            </StyledTask>\r\n        ))}\r\n    </StyledList >\r\n    );\r\n};\r\n\r\nexport default TasksList;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, markAllTaskDone } from \"../tasksSlice\";\r\nimport { StyledButton, StyledButtonSection } from \"./styled\";\r\n\r\nconst Buttons = () => {\r\n    const {tasks, hideDone} = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n\r\n    if (tasks.length === 0) {\r\n        return null;\r\n    }\r\n    return (\r\n        <StyledButtonSection>\r\n            <StyledButton\r\n                onClick={() => dispatch(markAllTaskDone())}\r\n                disabled={(tasks.every(({ done }) => done))}\r\n                selectAll\r\n            >\r\n                Mark all as done\r\n            </StyledButton>\r\n            <StyledButton\r\n                onClick={() => dispatch(toggleHideDone())}\r\n                hideDone\r\n            >\r\n                {tasks.some(({done}) => done) && hideDone ? \"Show\" : \"Hide\"} done\r\n            </StyledButton>\r\n        </StyledButtonSection>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import Form from \"./Form\";\r\nimport Header from \"../../common/Header\";\r\nimport Footer from \"../../common/Footer\";\r\nimport Section from \"../../common/Section\";\r\nimport Container from \"../../common/Container\";\r\nimport TasksList from \"./TasksList\";\r\nimport Buttons from \"./Buttons\";\r\n\r\nconst Tasks = () => {\r\n  return (\r\n    <Container>\r\n      <Header title=\"Task List\" />\r\n      <Section\r\n        title=\"Add task\"\r\n        body={<Form />}\r\n      />\r\n      <Section\r\n        title=\"List of tasks\"\r\n        body={<TasksList />}\r\n        additionalContent={<Buttons />}\r\n      />\r\n      <Footer name=\"Patryk Krawczyk\" year=\"2021\" />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Tasks;\r\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nconst App = () => <Tasks />;\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { GlobalStyle } from './GlobalStyle';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { theme } from './theme';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <GlobalStyle />\r\n        <App />\r\n      </ThemeProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export const theme = {\r\n    color: {\r\n        white: \"#fff\",\r\n        platinum: \"#E6E6E6\",\r\n        green: \"#00B300\",\r\n        red: \"#FF0000\",\r\n        black: \"#000000\",\r\n        teal: \"#008080\",\r\n        grey: \"#DEDEDE\"\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n        maxWidth: 1280,\r\n    },\r\n};\r\n"],"sourceRoot":""}